{
  "openapi": "3.0.3",
  "info": {
    "title": "BFD Admin",
    "version": "v0.1.0"
  },
  "paths": {
    "/peers": {
      "get": {
        "summary": "Get all the peers and their associated BFD state. Peers are identified by IP",
        "description": "address.",
        "operationId": "get_peers",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Map_of_PeerState",
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/PeerState"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "summary": "Add a new peer to the daemon. A session for the specified peer will start",
        "description": "immediately.",
        "operationId": "add_peer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPeerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/peers/{addr}": {
      "delete": {
        "summary": "Remove the specified peer from the daemon. The associated peer session will",
        "description": "be stopped immediately.",
        "operationId": "remove_peer",
        "parameters": [
          {
            "in": "path",
            "name": "addr",
            "description": "Address of the peer to remove.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ip"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "Error": {
        "description": "Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "AddPeerRequest": {
        "description": "Request to add a peer to the daemon.",
        "type": "object",
        "properties": {
          "detection_threshold": {
            "description": "Detection threshold for connectivity as a multipler to required_rx",
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          },
          "listen": {
            "description": "Address to listen on for control messages from the peer.",
            "type": "string",
            "format": "ip"
          },
          "peer": {
            "description": "Address of the peer to add.",
            "type": "string",
            "format": "ip"
          },
          "required_rx": {
            "description": "Acceptable time between control messages in microseconds.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          }
        },
        "required": [
          "detection_threshold",
          "listen",
          "peer",
          "required_rx"
        ]
      },
      "Error": {
        "description": "Error information from a response.",
        "type": "object",
        "properties": {
          "error_code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "request_id": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "request_id"
        ]
      },
      "PeerState": {
        "description": "The possible peer states. See the `State` trait implementations `Down`, `Init`, and `Up` for detailed semantics.",
        "oneOf": [
          {
            "description": "A stable down state. Non-responsive to incomming messages.",
            "type": "string",
            "enum": [
              "AdminDown"
            ]
          },
          {
            "description": "The initial state.",
            "type": "string",
            "enum": [
              "Down"
            ]
          },
          {
            "description": "The peer has detected a remote peer in the down state.",
            "type": "string",
            "enum": [
              "Init"
            ]
          },
          {
            "description": "The peer has detected a remote peer in the up or init state while in the init state.",
            "type": "string",
            "enum": [
              "Up"
            ]
          }
        ]
      }
    }
  }
}